"""

File: gptests.py
Author: Hadayat Seddiqi
Date: 1-29-2014
Description: Holds tests for gaussian process functions.

"""

import numpy as np
import scipy as sp
import addpath
import gaussian_process as gp

class TestGP:
    def setUp(self):
        f = lambda x: np.sin(2*np.pi*10.*x) + np.sin(2*np.pi*13.*x)
        Ts = 1/150.0
        self.x = np.atleast_2d(np.arange(0,1,Ts)).T
        self.xt = np.atleast_2d(np.arange(0,2,Ts)).T
        self.y = np.atleast_2d(f(self.x).ravel()).T
        self.yt = np.atleast_2d(f(self.xt).ravel()).T
        self.hyps = {
            'mean': np.array([]), 
            'lik': [np.log(0.5)], 
            'cov': np.log([2.54846959e-01, 5.24927544e-01, 2.15436686e-01, 
                           2.86117061e-01, 1.81531436e-01, 1.44032999e-01,
                           1.29493734e+01, 9.92190150e+00, 1.85152636e+02,
                           7.49453588e+01, 1.81532400e+00, 2.28497943e+01,
                           1.03092807e-01, 4.88398945e-02, 1.94985263e+01,
                           3.19829864e+01, 2.12244665e+00, 8.39227875e-01])
            }
        self.hypGP = gp.GaussianProcess(hyp=self.hyps, 
                                        inf=gp.inferences.exact, 
                                        mean=gp.means.zero, 
                                        cov=gp.kernels.spectral_mixture,
                                        lik=gp.likelihoods.gaussian, 
                                        xtrain=self.x, ytrain=self.y, 
                                        xtest=self.xt, ytest=self.yt)

    def test_hypdict2flat(self):
        hypdict = self.hyps
        hypflat = self.hypGP._hypDict2Flat(hypdict)
        realflat = np.array(
            [-1.36709207, -0.64449504, -1.53508821, -1.25135425, -1.70632644,
             -1.93771285,  2.5610474 ,  2.29474459,  5.22118054,  4.3167593 ,
              0.59626396,  3.12894212, -2.27212566, -3.01920779,  2.97033889,
              3.46520409,  0.7525695 , -0.17527301, -0.69314718]
            )
        assert np.allclose(realflat, hypflat)

    def test_hypflat2dict(self):
        hypflat = np.array(
            [-1.36709207, -0.64449504, -1.53508821, -1.25135425, -1.70632644,
             -1.93771285,  2.5610474 ,  2.29474459,  5.22118054,  4.3167593 ,
              0.59626396,  3.12894212, -2.27212566, -3.01920779,  2.97033889,
              3.46520409,  0.7525695 , -0.17527301, -0.69314718]
            )
        hypdict = self.hypGP._hypFlat2Dict(hypflat)
        for k,v in hypdict.iteritems():
            assert np.allclose(hypdict[k], self.hyps[k])

    def test_train(self):
        hypGP = self.hypGP
        hyp, nlml = hypGP.train(method='COBYLA', 
                                options={'maxiter':100},
                                write=False)
        assert np.allclose(nlml, 84.3777971786)

    def test_predict(self):
        pred = self.hypGP.predict()
        # import pylab as pl
        # pl.plot(self.xt, pred['ymu'])
        # pl.plot(self.xt, self.yt)
        # pl.show()
        ymu = np.array(
            [[  1.75135474e-01,   1.03111028e+00,   1.64656045e+00,
                1.88240347e+00,   1.68766876e+00,   1.11437301e+00,
                3.08743446e-01,  -5.27858648e-01,  -1.19526879e+00,
                -1.54812799e+00,  -1.52957108e+00,  -1.17696966e+00,
                -6.02569786e-01,   4.12576614e-02,   6.01332946e-01,
                9.59105128e-01,   1.05617504e+00,   9.04996867e-01,
                5.81255908e-01,   1.98288359e-01,  -1.29829132e-01,
                -3.24325179e-01,  -3.63787952e-01,  -2.84357615e-01,
                -1.59275574e-01,  -6.71556491e-02,  -6.15983050e-02,
                -1.52421051e-01,  -3.03196099e-01,  -4.44201916e-01,
                -4.96157319e-01,  -3.98146147e-01,  -1.32164573e-01,
                2.63330413e-01,   6.96715714e-01,   1.04483083e+00,
                1.18824219e+00,   1.04981043e+00,   6.23905339e-01,
                -1.40214116e-02,  -7.21614033e-01,  -1.32417663e+00,
                -1.66020833e+00,  -1.62553223e+00,  -1.20409889e+00,
                -4.76890445e-01,   3.94269255e-01,   1.20481433e+00,
                1.75825722e+00,   1.91657692e+00,   1.63655143e+00,
                9.81920899e-01,   1.07855833e-01,  -7.78155844e-01,
                -1.46853379e+00,  -1.80716381e+00,  -1.72696366e+00,
                -1.26401893e+00,  -5.45091150e-01,   2.47677055e-01,
                9.25012601e-01,   1.33850993e+00,   1.41551517e+00,
                1.17206620e+00,   7.01551070e-01,   1.43659093e-01,
                -3.56574112e-01,  -6.87707303e-01,  -7.98236394e-01,
                -7.03895936e-01,  -4.75128167e-01,  -2.09561521e-01,
                1.50804796e-03,   1.02102618e-01,   8.70819907e-02,
                -3.58903966e-04,  -8.79013115e-02,  -1.03239666e-01,
                -3.13732684e-03,   2.07505517e-01,   4.73153712e-01,
                7.02927058e-01,   7.99249638e-01,   6.91188400e-01,
                3.62126234e-01,  -1.37293716e-01,  -6.96061000e-01,
                -1.16898652e+00,  -1.41578576e+00,  -1.34230502e+00,
                -9.31767303e-01,  -2.56178911e-01,   5.36571072e-01,
                1.25746040e+00,   1.72412862e+00,   1.80903076e+00,
                1.47489858e+00,   7.87630158e-01,  -9.74376815e-02,
                -9.72902861e-01,  -1.63092291e+00,  -1.91561326e+00,
                -1.76227769e+00,  -1.21301031e+00,  -4.04715595e-01,
                4.66838286e-01,   1.19698881e+00,   1.62290014e+00,
                1.66209206e+00,   1.32938082e+00,   7.28514912e-01,
                2.12843214e-02,  -6.17210453e-01,  -1.04461221e+00,
                -1.18575495e+00,  -1.04615211e+00,  -7.01867910e-01,
                -2.70610544e-01,   1.25669698e-01,   3.94922613e-01,
                4.96632669e-01,   4.46492592e-01,   3.04621815e-01,
                1.51680573e-01,   5.98085325e-02,   6.68032931e-02,
                1.61917209e-01,   2.89089459e-01,   3.67943077e-01,
                3.25898576e-01,   1.29463706e-01,  -1.97720796e-01,
                -5.77379506e-01,  -8.98668879e-01,  -1.05163976e+00,
                -9.61028745e-01,  -6.10950341e-01,  -5.48914414e-02,
                5.91139150e-01,   1.17201925e+00,   1.53046655e+00,
                1.55032444e+00,   1.19437955e+00,   5.23224881e-01,
                -3.14136334e-01,  -1.11753484e+00,  -1.68945970e+00,
                -1.88709717e+00,  -1.65556294e+00,  -1.04010879e+00,
                -3.07345004e-01,   5.64280390e-01,   1.29100869e+00,
                1.71115280e+00,   1.73383652e+00,   1.36094904e+00,
                6.92361473e-01,  -9.90041185e-02,  -8.16335015e-01,
                -1.29505371e+00,  -1.44573373e+00,  -1.26980368e+00,
                -8.46670231e-01,  -3.02123654e-01,   2.28243020e-01,
                6.30415401e-01,   8.33953664e-01,   8.23706998e-01,
                6.39921695e-01,   3.64619611e-01,   9.48075314e-02,
                -9.06363584e-02,  -1.57972341e-01,  -1.27405334e-01,
                -5.92492671e-02,  -2.39660030e-02,  -7.01283854e-02,
                -2.04069471e-01,  -3.87861849e-01,  -5.53500665e-01,
                -6.25889282e-01,  -5.46946733e-01,  -2.95520127e-01,
                1.00476918e-01,   5.63173517e-01,   9.78228582e-01,
                1.22278269e+00,   1.20208579e+00,   8.83309516e-01,
                3.13587960e-01,  -3.85995527e-01,  -1.04985791e+00,
                -1.51155553e+00,  -1.64804421e+00,  -1.41213534e+00,
                -8.45513842e-01,  -7.02544850e-02,   7.38678543e-01,
                1.39405787e+00,   1.74145520e+00,   1.69806832e+00,
                1.27474983e+00,   5.74135131e-01,  -2.35629882e-01,
                -9.64474337e-01,  -1.44874612e+00,  -1.59066464e+00,
                -1.37869390e+00,  -8.84884859e-01,  -2.41737273e-01,
                3.94030230e-01,   8.81015421e-01,   1.12615522e+00,
                1.10342229e+00,   8.54086524e-01,   4.69277516e-01,
                6.04820460e-02,  -2.72950516e-01,  -4.69561536e-01,
                -5.17570029e-01,  -4.50279335e-01,  -3.28033902e-01,
                -2.13664356e-01,  -1.49833981e-01,  -1.45456832e-01,
                -1.75071384e-01,  -1.90850118e-01,  -1.42998310e-01,
                -1.67008133e-03,   2.27081630e-01,   4.97152388e-01,
                7.32302169e-01,   8.47923841e-01,   7.78417183e-01,
                5.01690937e-01,   5.26975224e-02,  -4.79135032e-01,
                -9.69046927e-01,  -1.28818190e+00,  -1.33865337e+00,
                -1.08269119e+00,  -5.57362038e-01,   1.29972662e-01,
                8.25164500e-01,   1.36423887e+00,   1.61443718e+00,
                1.50857703e+00,   1.06349509e+00,   3.77425121e-01,
                -3.93286374e-01,  -1.07223620e+00,  -1.50598981e+00,
                -1.60100568e+00,  -1.34508905e+00,  -8.08177261e-01,
                -1.22742510e-01,   5.50606622e-01,   1.06305125e+00,
                1.31261230e+00,   1.26559343e+00,   9.59631921e-01,
                4.88651598e-01,  -2.52025968e-02,  -4.64381438e-01,
                -7.44462780e-01,  -8.31121388e-01,  -7.41948709e-01,
                -5.34020100e-01,  -2.82078073e-01,  -5.45398838e-02,
                1.05358345e-01,   1.88033769e-01,   2.13931897e-01,
                2.19981451e-01,   2.41364214e-01,   2.95150787e-01,
                3.71559095e-01,   4.35967710e-01,   4.41194796e-01,
                3.46070668e-01,   1.34079038e-01,  -1.74461572e-01,
                -5.21429977e-01,  -8.22551888e-01,  -9.89135882e-01,
                -9.54031029e-01,  -6.94239707e-01,  -2.43117346e-01,
                3.12281897e-01,   8.49097392e-01,   1.23782384e+00,
                1.37537465e+00,   1.21323434e+00,   7.72863471e-01,
                1.43703024e-01,  -5.36322954e-01,  -1.11322265e+00,
                -1.45415659e+00,  -1.47995533e+00,  -1.18456592e+00]]
            ).T
        assert np.allclose(pred['ymu'], ymu)
        assert np.allclose(pred['post'][2], np.matrix(2*np.ones(150)).T)
